package com.example.shopmall.framework.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.shopmall.framework.message.ShopMallMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_MALL_MESSAGE".
*/
public class ShopMallMessageDao extends AbstractDao<ShopMallMessage, Long> {

    public static final String TABLENAME = "SHOP_MALL_MESSAGE";

    /**
     * Properties of entity ShopMallMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property IsRead = new Property(5, boolean.class, "isRead", false, "IS_READ");
        public final static Property ProductId = new Property(6, String.class, "productId", false, "PRODUCT_ID");
        public final static Property ProductPrice = new Property(7, String.class, "productPrice", false, "PRODUCT_PRICE");
        public final static Property ProductName = new Property(8, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductImageUrl = new Property(9, String.class, "productImageUrl", false, "PRODUCT_IMAGE_URL");
        public final static Property OutTradeNo = new Property(10, String.class, "outTradeNo", false, "OUT_TRADE_NO");
        public final static Property TotalPrice = new Property(11, String.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property AddPoint = new Property(12, String.class, "addPoint", false, "ADD_POINT");
        public final static Property Steps = new Property(13, String.class, "steps", false, "STEPS");
    }


    public ShopMallMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ShopMallMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_MALL_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"IS_READ\" INTEGER NOT NULL ," + // 5: isRead
                "\"PRODUCT_ID\" TEXT," + // 6: productId
                "\"PRODUCT_PRICE\" TEXT," + // 7: productPrice
                "\"PRODUCT_NAME\" TEXT," + // 8: productName
                "\"PRODUCT_IMAGE_URL\" TEXT," + // 9: productImageUrl
                "\"OUT_TRADE_NO\" TEXT," + // 10: outTradeNo
                "\"TOTAL_PRICE\" TEXT," + // 11: totalPrice
                "\"ADD_POINT\" TEXT," + // 12: addPoint
                "\"STEPS\" TEXT);"); // 13: steps
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_MALL_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopMallMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(7, productId);
        }
 
        String productPrice = entity.getProductPrice();
        if (productPrice != null) {
            stmt.bindString(8, productPrice);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(9, productName);
        }
 
        String productImageUrl = entity.getProductImageUrl();
        if (productImageUrl != null) {
            stmt.bindString(10, productImageUrl);
        }
 
        String outTradeNo = entity.getOutTradeNo();
        if (outTradeNo != null) {
            stmt.bindString(11, outTradeNo);
        }
 
        String totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindString(12, totalPrice);
        }
 
        String addPoint = entity.getAddPoint();
        if (addPoint != null) {
            stmt.bindString(13, addPoint);
        }
 
        String steps = entity.getSteps();
        if (steps != null) {
            stmt.bindString(14, steps);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopMallMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(7, productId);
        }
 
        String productPrice = entity.getProductPrice();
        if (productPrice != null) {
            stmt.bindString(8, productPrice);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(9, productName);
        }
 
        String productImageUrl = entity.getProductImageUrl();
        if (productImageUrl != null) {
            stmt.bindString(10, productImageUrl);
        }
 
        String outTradeNo = entity.getOutTradeNo();
        if (outTradeNo != null) {
            stmt.bindString(11, outTradeNo);
        }
 
        String totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindString(12, totalPrice);
        }
 
        String addPoint = entity.getAddPoint();
        if (addPoint != null) {
            stmt.bindString(13, addPoint);
        }
 
        String steps = entity.getSteps();
        if (steps != null) {
            stmt.bindString(14, steps);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShopMallMessage readEntity(Cursor cursor, int offset) {
        ShopMallMessage entity = new ShopMallMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.getLong(offset + 4), // time
            cursor.getShort(offset + 5) != 0, // isRead
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // productId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // productPrice
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // productName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // productImageUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // outTradeNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // totalPrice
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // addPoint
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // steps
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopMallMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setIsRead(cursor.getShort(offset + 5) != 0);
        entity.setProductId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductPrice(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProductName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProductImageUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOutTradeNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTotalPrice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddPoint(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSteps(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopMallMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopMallMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopMallMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
