package com.example.shopmall.shopmall1710a.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_MESSAGE".
*/
public class ShopMessageDao extends AbstractDao<ShopMessage, Void> {

    public static final String TABLENAME = "SHOP_MESSAGE";

    /**
     * Properties of entity ShopMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductImageUrl = new Property(0, String.class, "productImageUrl", false, "PRODUCT_IMAGE_URL");
        public final static Property ProductPrice = new Property(1, String.class, "productPrice", false, "PRODUCT_PRICE");
        public final static Property ProductId = new Property(2, String.class, "productId", false, "PRODUCT_ID");
        public final static Property ProductName = new Property(3, String.class, "productName", false, "PRODUCT_NAME");
    }

    
    public ShopMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_MESSAGE\" (" + //
                "\"PRODUCT_IMAGE_URL\" TEXT," + // 0: productImageUrl
                "\"PRODUCT_PRICE\" TEXT," + // 1: productPrice
                "\"PRODUCT_ID\" TEXT," + // 2: productId
                "\"PRODUCT_NAME\" TEXT);"); // 3: productName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopMessage entity) {
        stmt.clearBindings();
 
        String productImageUrl = entity.getProductImageUrl();
        if (productImageUrl != null) {
            stmt.bindString(1, productImageUrl);
        }
 
        String productPrice = entity.getProductPrice();
        if (productPrice != null) {
            stmt.bindString(2, productPrice);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(3, productId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopMessage entity) {
        stmt.clearBindings();
 
        String productImageUrl = entity.getProductImageUrl();
        if (productImageUrl != null) {
            stmt.bindString(1, productImageUrl);
        }
 
        String productPrice = entity.getProductPrice();
        if (productPrice != null) {
            stmt.bindString(2, productPrice);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(3, productId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ShopMessage readEntity(Cursor cursor, int offset) {
        ShopMessage entity = new ShopMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // productImageUrl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productPrice
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // productId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // productName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopMessage entity, int offset) {
        entity.setProductImageUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProductPrice(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ShopMessage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ShopMessage entity) {
        return null;
    }

    @Override
    public boolean hasKey(ShopMessage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
